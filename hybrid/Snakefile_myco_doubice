# hybrid assembly pipeline

# files and directories
configfile: "config_myco_doubice.yaml"

PU = '1P 1U 2P 2U'.split() # paired_unpaired
END = '1 2'.split() # paired_end

rule all:
	input:
		# SPAdes and Unicycler
		expand("{path}/hybrid/spades_and_unicycler/assembly/{strain}_{demultiplex}_{assembler}/{strain}_{demultiplex}_{assembler}.contigs.fasta", path = config["path"], strain = config["strains"], demultiplex = config["preprocessing"], assembler = config["assembly"]),
		# 
		# QUAST
		expand("{path}/hybrid/spades_and_unicycler/quality/quast/{strain}/report.html", path = config["path"], strain = config["strains"]),
		expand("{path}/hybrid/spades_and_unicycler/quality/quast/report.html", path = config["path"])
		# 
		# get unique read ID for the short reads
		expand("{path}/hybrid/preprocessing/{strain}_all_short_unique.fastq", path = config["path"], strain = config["strains"]),
		# 
		# 4x Racon with short reads
		expand("{path}/hybrid/postprocessing/racon_short/{strain}_{demultiplex}_{assembler}/{strain}_{demultiplex}_{assembler}_short4.contigs.fasta", path = config["path"], strain = config["strains"], demultiplex = config["preprocessing"], assembler = config["assembly2"]),
		# 
		# QUAST
		expand("{path}/hybrid/quality/quast/{strain}/report.html", path = config["path"], strain = config["strains"]),
		expand("{path}/hybrid/quality/quast/report.html", path = config["path"])

# create folders for the following steps
rule create:
	shell:
		'python create.py'

# SPAdes
rule spades_hybrid:
	input:
		forward = '{path}/illumina/preprocessing/{strain}/{strain}_1P.fastq.gz',
		forwardUnpaired = '{path}/illumina/preprocessing/{strain}/{strain}_1U.fastq.gz',
		reverse = '{path}/illumina/preprocessing/{strain}/{strain}_2P.fastq.gz',
		reverseUnpaired = '{path}/illumina/preprocessing/{strain}/{strain}_2U.fastq.gz',
		nanopore = '{path}/nanopore/preprocessing/{demultiplex}/{strain}_{demultiplex}.fastq'
	output:
		contigs = '{path}/hybrid/spades_and_unicycler/assembly/{strain}_{demultiplex}_spades/contigs.fasta'	#contains resulting contigs
		# 'hybrid/assembly/{strain}_spades/contigs.paths',					#contains paths in the assembly graph corresponding to contigs.fasta (see details below)
		# 'hybrid/assembly/{strain}_spades/scaffolds.fasta',				#contains resulting scaffolds (recommended for use as resulting sequences)
		# 'hybrid/assembly/{strain}_spades/scaffolds.paths',				#contains paths in the assembly graph corresponding to scaffolds.fasta
		# 'hybrid/assembly/{strain}_spades/assembly_graph.gfa',				#contains SPAdes assembly graph and scaffolds paths in GFA 1.0 format
		# 'hybrid/assembly/{strain}_spades/assembly_graph.fastg'			#contains SPAdes assembly graph in FASTG format
	conda:
		'/mnt/prostlocal2/projects/st_mycoplasma_assembly/git/assembly.yml'
	params:
		outputdir = '{path}/hybrid/spades_and_unicycler/assembly/{strain}_{demultiplex}_spades/'
	threads: 24 #default: 16
	shell:
		'spades.py -t {threads} --careful -1 {input.forward} -2 {input.reverse} --pe1-s {input.forwardUnpaired} --pe1-s {input.reverseUnpaired} --nanopore {input.nanopore} -o {params.outputdir}'
 		# --only-assembler		runs only assembling (without read error correction)
 		# --careful				tries to reduce number of mismatches and short indels
 		# --pacbio <filename>   file with PacBio reads
 		# --nanopore <filename> file with Nanopore reads
        # -1 <filename>			file with forward paired-end reads
		# -2 <filename>			file with reverse paired-end reads
		# --pe1-s				file with unpaired reads from paired-end library (for example, paired end reads can become unpaired during the error correction procedure)

# rename SPAdes output
rule rename_spades:
	input:
		contigs = rules.spades_hybrid.output.contigs
	output:
		spades = '{path}/hybrid/spades_and_unicycler/assembly/{strain}_{demultiplex}_spades/{strain}_{demultiplex}_spades.contigs.fasta'
	shell:
		'mv {input.contigs} {output.spades}'

# Unicycler
rule unicycler:
	input:
		forward = '{path}/illumina/preprocessing/{strain}/{strain}_1P.fastq.gz',
		reverse = '{path}/illumina/preprocessing/{strain}/{strain}_2P.fastq.gz',
		nanopore = '{path}/nanopore/preprocessing/{demultiplex}/{strain}_{demultiplex}.fastq'
	output:
		contigs = '{path}/hybrid/spades_and_unicycler/assembly/{strain}_{demultiplex}_unicycler/assembly.fasta'
	conda:
		'/mnt/prostlocal2/projects/st_mycoplasma_assembly/git/assembly.yml'
	params:
		outputdir = '{path}/hybrid/spades_and_unicycler/assembly/{strain}_{demultiplex}_unicycler/'
	threads: 24
	shell:
		'unicycler -t {threads} -1 {input.forward} -2 {input.reverse} -l {input.nanopore} -o {params.outputdir}'

# rename Unicycler output
rule rename_unicycler:
	input:
		contigs = rules.unicycler.output.contigs
	output:
		unicycler = '{path}/hybrid/spades_and_unicycler/assembly/{strain}_{demultiplex}_unicycler/{strain}_{demultiplex}_unicycler.contigs.fasta'
	shell:
		'mv {input.contigs} {output.unicycler}'

# quality check separated by strain - quast
rule quast_strain_spades_and_unicycler:
	input:
		in1 = '{path}/hybrid/spades_and_unicycler/assembly/{strain}_porechop_spades/{strain}_porechop_spades.contigs.fasta',
		in2 = '{path}/hybrid/spades_and_unicycler/assembly/{strain}_porechop_unicycler/{strain}_porechop_unicycler.contigs.fasta',
		in3 = '{path}/hybrid/spades_and_unicycler/assembly/{strain}_deepbinner_spades/{strain}_deepbinner_spades.contigs.fasta',
		in4 = '{path}/hybrid/spades_and_unicycler/assembly/{strain}_deepbinner_unicycler/{strain}_deepbinner_unicycler.contigs.fasta'
	output:
		report = '{path}/hybrid/spades_and_unicycler/quality/quast/{strain}/report.html'
		#...
	conda:
		'/mnt/prostlocal2/projects/st_mycoplasma_assembly/git/assembly_quality.yml'
	params:
		outputdir = '{path}/hybrid/spades_and_unicycler/quality/quast/{strain}/'
	threads: 16
	shell:
		'quast {input.in1} {input.in2} {input.in3} {input.in4} -r /mnt/prostlocal2/projects/st_mycoplasma_assembly/mycoplasma_bovis_genomes/mycoplasma_bovis_referenceGenome.fasta -g /mnt/prostlocal2/projects/st_mycoplasma_assembly/mycoplasma_bovis_genomes/GCF_000183385.1_ASM18338v1_genomic.gff -o {params.outputdir}'

# quality check - quast
rule quast_all_spades_and_unicycler:
	input:
		in1 = '{path}/hybrid/spades_and_unicycler/assembly/15DD0163_porechop_spades/15DD0163_porechop_spades.contigs.fasta',
		in2 = '{path}/hybrid/spades_and_unicycler/assembly/15DD0163_porechop_unicycler/15DD0163_porechop_unicycler.contigs.fasta',
		in3 = '{path}/hybrid/spades_and_unicycler/assembly/15DD0163_deepbinner_spades/15DD0163_deepbinner_spades.contigs.fasta',
		in4 = '{path}/hybrid/spades_and_unicycler/assembly/15DD0163_deepbinner_unicycler/15DD0163_deepbinner_unicycler.contigs.fasta',
		in5 = '{path}/hybrid/spades_and_unicycler/assembly/17DD0007_porechop_spades/17DD0007_porechop_spades.contigs.fasta',
		in6 = '{path}/hybrid/spades_and_unicycler/assembly/17DD0007_porechop_unicycler/17DD0007_porechop_unicycler.contigs.fasta',
		in7 = '{path}/hybrid/spades_and_unicycler/assembly/17DD0007_deepbinner_spades/17DD0007_deepbinner_spades.contigs.fasta',
		in8 = '{path}/hybrid/spades_and_unicycler/assembly/17DD0007_deepbinner_unicycler/17DD0007_deepbinner_unicycler.contigs.fasta',
		in9 = '{path}/hybrid/spades_and_unicycler/assembly/17DD0020_porechop_spades/17DD0020_porechop_spades.contigs.fasta',
		in10 = '{path}/hybrid/spades_and_unicycler/assembly/17DD0020_porechop_unicycler/17DD0020_porechop_unicycler.contigs.fasta',
		in11 = '{path}/hybrid/spades_and_unicycler/assembly/17DD0020_deepbinner_spades/17DD0020_deepbinner_spades.contigs.fasta',
		in12 = '{path}/hybrid/spades_and_unicycler/assembly/17DD0020_deepbinner_unicycler/17DD0020_deepbinner_unicycler.contigs.fasta'
	output:
		report = '{path}/hybrid/spades_and_unicycler/quality/quast/report.html'
		#...
	conda:
		'/mnt/prostlocal2/projects/st_mycoplasma_assembly/git/assembly_quality.yml'
	params:
		outputdir = '{path}/hybrid/spades_and_unicycler/quality/quast/'
	threads: 16
	shell:
		'quast {input.in1} {input.in2} {input.in3} {input.in4} {input.in5} {input.in6} {input.in7} {input.in8} {input.in9} {input.in10} {input.in11} {input.in12} -r /mnt/prostlocal2/projects/st_mycoplasma_assembly/mycoplasma_bovis_genomes/mycoplasma_bovis_referenceGenome.fasta -g /mnt/prostlocal2/projects/st_mycoplasma_assembly/mycoplasma_bovis_genomes/GCF_000183385.1_ASM18338v1_genomic.gff -o {params.outputdir}'



# second hybrid approach
# concatenate all short reads separated by strain for postprocessing of the long reads assemblies later
rule concat_short:
	input:
		forwardP = '{path}/illumina/preprocessing/{strain}/{strain}_1P.fastq.gz',
		forwardU = '{path}/illumina/preprocessing/{strain}/{strain}_1U.fastq.gz',
		reverseP = '{path}/illumina/preprocessing/{strain}/{strain}_2P.fastq.gz',
		reverseU = '{path}/illumina/preprocessing/{strain}/{strain}_2U.fastq.gz'
	output:
		all = '{path}/hybrid/preprocessing/{strain}_all_short.fastq.gz'
	shell:
		'cat {input.forwardP} {input.forwardU} {input.reverseP} {input.reverseU} > {output.all}'

rule gunzip_short:
	input:
		all = rules.concat_short.output.all
	output:
		gunzip = '{path}/hybrid/preprocessing/{strain}_all_short.fastq'
	shell:
		'gunzip {input.all}'

# concatenate the read ID in one line to get unique read IDs for postprocessing of the long reads assemblies later
rule unique_readID:
	input:
		all = rules.gunzip_short.output.gunzip
	output:
		unique = '{path}/hybrid/preprocessing/{strain}_all_short_unique.fastq'
	shell:
		"sed 's/ 2:N:0/:2:N:0/g' {input.all} | sed 's/ 1:N:0/:1:N:0/g' > {output.unique}"

# polishing with Racon and mapping inbetween with Minimap2
rule minimap2_racon_short:
	input:
		assembly = '{path}/nanopore/postprocessing/{strain}_{demultiplex}_{assembler}/consensus.fasta',
		reads = rules.unique_readID.output.unique
	output:
		out = '{path}_docker/racon/hybrid/{strain}_{demultiplex}_{assembler}_short4.contigs.fasta'
	params:
		strain = '{strain}',
		demultiplex = '{demultiplex}',
		assembler = '{assembler}',
		path = '{path}'
	threads: 32
	run:
		import os
		import time
		reads_path = str(params.path) + '/hybrid/preprocessing/'
		only_reads = str(params.strain) + '_all_short_unique.fastq'
		racon_path = '/mnt/prostlocal2/projects/st_mycoplasma_assembly_docker/racon/hybrid/'
		assembly_path = str(params.path) + '/nanopore/postprocessing/' +  str(params.strain) + '_' + str(params.demultiplex) + '_' + str(params.assembler) + '/'
		paf_path = str(params.path) + '/hybrid/postprocessing/racon_short/' + str(params.strain) + '_' + str(params.demultiplex) + '_' + str(params.assembler) + '/'
		assembly_file = 'consensus.fasta'
		for i in range(4):
			if i == 0:
				minimap2_input_assembly = assembly_path + assembly_file
				racon_in_assembly = assembly_file
			else:
				minimap2_input_assembly = racon_path + out_assembly
				racon_in_assembly = out_assembly
			out_assembly = str(params.strain) + '_' + str(params.demultiplex) + '_' + str(params.assembler) + '_short' + str(i + 1) + '.contigs.fasta'
			paf = str(params.strain) + '_' + str(params.demultiplex) + '_' + str(params.assembler) + '_short' + str(i + 1) + '.paf'
			minimap2 = 'minimap2 -x sr -t 16 ' + minimap2_input_assembly + ' ' + reads_path + only_reads + ' > ' + paf_path + paf
			print(minimap2 + '\n')
			os.system(minimap2)
			while os.path.isfile(paf_path + paf) == False:
				time.sleep(5)
			if i == 0:
				racon = 'docker run --rm --user $(id -u):$(id -g) -it -v ' + reads_path + ':/input1 -v ' + paf_path + ':/input2 -v ' + assembly_path + ':/input3 -v ' + racon_path + ':/output quay.io/biocontainers/racon:1.3.2--he941832_0 sh -c "racon -t 32 /input1/' + only_reads + ' /input2/' + paf + ' /input3/' + racon_in_assembly + ' > /output/' + out_assembly + '"'
			else:
				racon = 'docker run --rm --user $(id -u):$(id -g) -it -v ' + reads_path + ':/input1 -v ' + paf_path + ':/input2 -v ' + racon_path + ':/input3 -v ' + racon_path + ':/output quay.io/biocontainers/racon:1.3.2--he941832_0 sh -c "racon -t 32 /input1/' + only_reads + ' /input2/' + paf + ' /input3/' + racon_in_assembly + ' > /output/' + out_assembly + '"'
			print(racon + '\n')			
			os.system(racon)

# move Racon output from docker folder to work folder
rule move_racon_short:
	input:
		racon_out = rules.minimap2_racon_short.output.out
	output:
		move = '{path}/hybrid/postprocessing/racon_short/{strain}_{demultiplex}_{assembler}/{strain}_{demultiplex}_{assembler}_short4.contigs.fasta'
	shell:
		'mv {input.racon_out} {output.move}'

rule quast_strain:
	input:
		in1 = '{path}/hybrid/postprocessing/racon_short/{strain}_porechop_canu/{strain}_porechop_canu_short4.contigs.fasta',
		in2 = '{path}/hybrid/postprocessing/racon_short/{strain}_deepbinner_canu/{strain}_deepbinner_canu_short4.contigs.fasta',
		in3 = '{path}/hybrid/postprocessing/racon_short/{strain}_porechop_flye/{strain}_porechop_flye_short4.contigs.fasta',
		in4 = '{path}/hybrid/postprocessing/racon_short/{strain}_deepbinner_flye/{strain}_deepbinner_flye_short4.contigs.fasta',
		in5 = '{path}/hybrid/postprocessing/racon_short/{strain}_porechop_wtdbg2/{strain}_porechop_wtdbg2_short4.contigs.fasta',
		in6 = '{path}/hybrid/postprocessing/racon_short/{strain}_deepbinner_wtdbg2/{strain}_deepbinner_wtdbg2_short4.contigs.fasta'
	output:
		report = '{path}/hybrid/quality/quast/{strain}/report.html'
		#...
	conda:
		'/mnt/prostlocal2/projects/st_mycoplasma_assembly/git/assembly_quality.yml'
	params:
		outputdir = '{path}/hybrid/quality/quast/{strain}'
	threads: 16
	shell:
		'quast {input.in1} {input.in2} {input.in3} {input.in4} {input.in5} {input.in6} -r /mnt/prostlocal2/projects/st_mycoplasma_assembly/mycoplasma_bovis_genomes/mycoplasma_bovis_referenceGenome.fasta -g /mnt/prostlocal2/projects/st_mycoplasma_assembly/mycoplasma_bovis_genomes/GCF_000183385.1_ASM18338v1_genomic.gff -o {params.outputdir}'

# quality check with quast
rule quast_all:
	input:
		in1 = '{path}/hybrid/postprocessing/racon_short/15DD0163_porechop_canu/15DD0163_porechop_canu_short4.contigs.fasta',
		in2 = '{path}/hybrid/postprocessing/racon_short/15DD0163_porechop_flye/15DD0163_porechop_flye_short4.contigs.fasta',
		in3 = '{path}/hybrid/postprocessing/racon_short/15DD0163_porechop_wtdbg2/15DD0163_porechop_wtdbg2_short4.contigs.fasta',
		in4 = '{path}/hybrid/postprocessing/racon_short/15DD0163_deepbinner_canu/15DD0163_deepbinner_canu_short4.contigs.fasta',
		in5 = '{path}/hybrid/postprocessing/racon_short/15DD0163_deepbinner_flye/15DD0163_deepbinner_flye_short4.contigs.fasta',
		in6 = '{path}/hybrid/postprocessing/racon_short/15DD0163_deepbinner_wtdbg2/15DD0163_deepbinner_wtdbg2_short4.contigs.fasta',
		in7 = '{path}/hybrid/postprocessing/racon_short/17DD0007_porechop_canu/17DD0007_porechop_canu_short4.contigs.fasta',
		in8 = '{path}/hybrid/postprocessing/racon_short/17DD0007_porechop_flye/17DD0007_porechop_flye_short4.contigs.fasta',
		in9 = '{path}/hybrid/postprocessing/racon_short/17DD0007_porechop_wtdbg2/17DD0007_porechop_wtdbg2_short4.contigs.fasta',
		in10 = '{path}/hybrid/postprocessing/racon_short/17DD0007_deepbinner_canu/17DD0007_deepbinner_canu_short4.contigs.fasta',
		in11 = '{path}/hybrid/postprocessing/racon_short/17DD0007_deepbinner_flye/17DD0007_deepbinner_flye_short4.contigs.fasta',
		in12 = '{path}/hybrid/postprocessing/racon_short/17DD0007_deepbinner_wtdbg2/17DD0007_deepbinner_wtdbg2_short4.contigs.fasta',
		in13 = '{path}/hybrid/postprocessing/racon_short/17DD0020_porechop_canu/17DD0020_porechop_canu_short4.contigs.fasta',
		in14 = '{path}/hybrid/postprocessing/racon_short/17DD0020_porechop_flye/17DD0020_porechop_flye_short4.contigs.fasta',
		in15 = '{path}/hybrid/postprocessing/racon_short/17DD0020_porechop_wtdbg2/17DD0020_porechop_wtdbg2_short4.contigs.fasta',
		in16 = '{path}/hybrid/postprocessing/racon_short/17DD0020_deepbinner_canu/17DD0020_deepbinner_canu_short4.contigs.fasta',
		in17 = '{path}/hybrid/postprocessing/racon_short/17DD0020_deepbinner_flye/17DD0020_deepbinner_flye_short4.contigs.fasta',
		in18 = '{path}/hybrid/postprocessing/racon_short/17DD0020_deepbinner_wtdbg2/17DD0020_deepbinner_wtdbg2_short4.contigs.fasta'
	output:
		report = '{path}/hybrid/quality/quast/report.html'
		#...
	conda:
		'/mnt/prostlocal2/projects/st_mycoplasma_assembly/git/assembly_quality.yml'
	params:
		outputdir = '{path}/hybrid/quality/quast/'
	threads: 16
	shell:
		'quast {input.in1} {input.in2} {input.in3} {input.in4} {input.in5} {input.in6} {input.in7} {input.in8} {input.in9} {input.in10} {input.in11} {input.in12} {input.in13} {input.in14} {input.in15} {input.in16} {input.in17} {input.in18} -r /mnt/prostlocal2/projects/st_mycoplasma_assembly/mycoplasma_bovis_genomes/mycoplasma_bovis_referenceGenome.fasta -g /mnt/prostlocal2/projects/st_mycoplasma_assembly/mycoplasma_bovis_genomes/GCF_000183385.1_ASM18338v1_genomic.gff -o {params.outputdir}'
