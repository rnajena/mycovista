.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Statistics::Basic::Mode 3"
.TH Statistics::Basic::Mode 3 "2012-01-23" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Statistics::Basic::Mode \- find the mode of a list
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Invoke it this way:
.PP
.Vb 1
\&    my $mode = mode(1,2,3,3);
.Ve
.PP
Or this way:
.PP
.Vb 2
\&    my $v1  = vector(1,2,3,3);
\&    my $mod = mode($v1);
.Ve
.PP
And then either query the values or print them like so:
.PP
.Vb 3
\&    print "The mod of $v1: $mod\en";
\&    my $mq = $mod\->query;
\&    my $m0 = 0+$mod; # this will croak occasionally, see below
.Ve
.PP
The mode of an array is not necessarily a scalar.  The mode of this vector is a
vector:
.PP
.Vb 2
\&    my $mod = mode(1,2,3);
\&    my $v2  = $mod\->query;
\&
\&    print "hrm, there\*(Aqs three elements in this mode: $mod\en"
\&        if $mod\->is_multimodal;
.Ve
.PP
Create a 20 point \*(L"moving\*(R" mode like so:
.PP
.Vb 1
\&    use Statistics::Basic qw(:all nofill);
\&
\&    my $sth = $dbh\->prepare("select col1 from data where something");
\&    my $len = 20;
\&    my $mod = mode()\->set_size($len);
\&
\&    $sth\->execute or die $dbh\->errstr;
\&    $sth\->bind_columns( my $val ) or die $dbh\->errstr;
\&
\&    while( $sth\->fetch ) {
\&        $mod\->insert( $val );
\&        if( defined( my $m = $mod\->query ) ) {
\&            print "Mode: $m\en";
\&        }
\&
\&        print "Mode: $mod\en" if $mod\->query_filled;
\&    }
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "\fB\f(BInew()\fB\fR" 4
.IX Item "new()"
The constructor takes a list of values, a single array ref, or a single
Statistics::Basic::Vector as arguments.  It returns a
Statistics::Basic::Mode object.
.Sp
Note: normally you'd use the \fImean()\fR constructor,
rather than building these by hand using \f(CW\*(C`new()\*(C'\fR.
.IP "\fB\f(BIis_multimodal()\fB\fR" 4
.IX Item "is_multimodal()"
Statistics::Basic::Mode objects sometimes return Statistics::Basic::Vector
objects instead of numbers.  When \f(CW\*(C`is_multimodal()\*(C'\fR is true, the mode is a
vector, not a scalar.
.IP "\fB\f(BI_OVB::import()\fB\fR" 4
.IX Item "_OVB::import()"
This module also inherits all the overloads and methods from
Statistics::Basic::_OneVectorBase.
.SH "OVERLOADS"
.IX Header "OVERLOADS"
This object is overloaded.  It tries to return an appropriate string for the
calculation or the value of the computation in numeric context.
.PP
In boolean context, this object is always true (even when empty).
.PP
If evaluated as a string, Statistics::Basic::Mode will try to format a number
(like any other Statistics::Basic object), but if the object
\&\*(L"\fIis_multimodal()\fR\*(R", it will instead return a Statistics::Basic::Vector for
stringification.
.PP
.Vb 2
\&    $x = mode(1,2,3);
\&    $y = mode(1,2,2);
\&
\&    print "$x, $y\en"; # prints: [1, 2, 3], 2
.Ve
.PP
If evaluated as a number, a Statistics::Basic::Mode will raise an error when
the object \*(L"\fIis_multimodal()\fR\*(R".
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Miller \f(CW\*(C`<jettero@cpan.org>\*(C'\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2012 Paul Miller \*(-- Licensed under the \s-1LGPL\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), Statistics::Basic, Statistics::Basic::_OneVectorBase, Statistics::Basic::Vector
