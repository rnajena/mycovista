.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Statistics::Basic::StdDev 3"
.TH Statistics::Basic::StdDev 3 "2012-01-23" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Statistics::Basic::StdDev \- find the standard deviation of a list
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Invoke it this way:
.PP
.Vb 1
\&    my $stddev = stddev(1,2,3);
.Ve
.PP
Or this way:
.PP
.Vb 2
\&    my $v1  = vector(1,2,3);
\&    my $std = stddev($v1);
.Ve
.PP
And then either query the values or print them like so:
.PP
.Vb 3
\&    print "The stddev of $v1: $std\en";
\&    my $sq = $std\->query;
\&    my $s0 = 0+$std;
.Ve
.PP
Create a 20 point \*(L"moving\*(R" stddev like so:
.PP
.Vb 1
\&    use Statistics::Basic qw(:all nofill);
\&
\&    my $sth = $dbh\->prepare("select col1 from data where something");
\&    my $len = 20;
\&    my $std = stddev()\->set_size($len);
\&
\&    $sth\->execute or die $dbh\->errstr;
\&    $sth\->bind_columns( my $val ) or die $dbh\->errstr;
\&
\&    while( $sth\->fetch ) {
\&        $std\->insert( $val );
\&        if( defined( my $s = $std\->query ) ) {
\&            print "StdDev: $s\en";
\&        }
\&
\&        # This would also work:
\&        # print "StdDev: $s\en" $std\->query_filled;
\&    }
.Ve
.SH "METHODS"
.IX Header "METHODS"
.IP "\fB\f(BInew()\fB\fR" 4
.IX Item "new()"
The constructor takes a list of values, a single array ref, or a
single Statistics::Basic::Vector as arguments.  It returns a
Statistics::Basic::StdDev object.
.Sp
Note: normally you'd use the \fImean()\fR constructor,
rather than building these by hand using \f(CW\*(C`new()\*(C'\fR.
.IP "\fB\f(BIquery_mean()\fB\fR" 4
.IX Item "query_mean()"
Returns the Statistics::Basic::Mean object used in the standard deviation
computation.
.IP "\fB\f(BI_OVB::import()\fB\fR" 4
.IX Item "_OVB::import()"
This module also inherits all the overloads and methods from
Statistics::Basic::_OneVectorBase.
.SH "OVERLOADS"
.IX Header "OVERLOADS"
This object is overloaded.  It tries to return an appropriate string for the
calculation or the value of the computation in numeric context.
.PP
In boolean context, this object is always true (even when empty).
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Miller \f(CW\*(C`<jettero@cpan.org>\*(C'\fR
.PP
I am using this software in my own projects...  If you find bugs, please
please please let me know. :) Actually, let me know if you find it handy at
all.  Half the fun of releasing this stuff is knowing that people use it.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2012 Paul Miller \*(-- Licensed under the \s-1LGPL\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), Statistics::Basic, Statistics::Basic::_OneVectorBase, Statistics::Basic::Vector
