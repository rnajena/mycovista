.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Statistics::Basic::_OneVectorBase 3"
.TH Statistics::Basic::_OneVectorBase 3 "2012-01-23" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Statistics::Basic::_OneVectorBase \- base class objects like Mean
.SH "METHODS"
.IX Header "METHODS"
.IP "\fB\f(BIquery()\fB\fR" 4
.IX Item "query()"
Query the value of the object.  It will return the undefined value until there's
something to calculate (or until the vector is full when
nofill is in effect).
.IP "\fB\f(BIinsert()\fB\fR" 4
.IX Item "insert()"
Insert new values into the vector.
.Sp
.Vb 1
\&    $object_instance\->insert( 4, 3 ); # insert a 3 and a 4
.Ve
.Sp
This function returns the object itself, for chaining purposes.
.IP "\fB\f(BIappend()\fB\fR \fB\f(BIginsert()\fB\fR" 4
.IX Item "append() ginsert()"
The growing insert inserts new elements, growing the max size of the vector to
accommodate the new elements (if necessary).
.Sp
.Vb 1
\&    $object_instance\->ginsert( 4, 3 ); # append a 3 and a 4
.Ve
.Sp
This function returns the object itself, for chaining purposes.
.IP "\fB\f(BIquery_size()\fB\fR" 4
.IX Item "query_size()"
The current size of the vector \*(-- regardless of its max size (as set by
\&\*(L"\fIset_size()\fR\*(R").
.IP "\fB\f(BIquery_vector()\fB\fR" 4
.IX Item "query_vector()"
Returns the Statistics::Basic::Vector object used by the computational
object.
.IP "\fB\f(BIset_size()\fB\fR" 4
.IX Item "set_size()"
Set the maximum size for the underlying Statistics::Basic::Vector object.
This function requires one arguments.
.Sp
Unless nofill is set, the vector will be
filled with \f(CW0\fRs (assuming the vector wouldn't otherwise be full) on the oldest
side of the vector (so an insert will push off one of the filled-zeros).
.Sp
This function returns the object itself, for chaining purposes.
.IP "\fB\f(BIset_vector()\fB\fR" 4
.IX Item "set_vector()"
Given a vector or array ref, this will set the contents (and size) of the vector
used for the object computations.
.Sp
This function returns the object itself, for chaining purposes.
.SH "OVERLOADS"
.IX Header "OVERLOADS"
This class provides overloads.  If evaluated as a string, it will attempt to
print a pretty value for the object (or \f(CW\*(C`n/a\*(C'\fR, see \*(L"\fIquery()\fR\*(R" above).  the
resulting string can be tuned, in terms of precision, see
ipres for further information.
.PP
If evaluated as a number, it will try to return the raw result of \*(L"\fIquery()\fR\*(R",
possibly turning the resulting \f(CW\*(C`undef\*(C'\fR (if applicable) into a \f(CW0\fR in the
process \*(-- note that Perl does this \f(CW0\fR\-izing, not the overload.
.PP
The \f(CW\*(C`eq\*(C'\fR and \f(CW\*(C`==\*(C'\fR operators are also overloaded, trying to do the right thing.
Also see toler for further information.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Miller \f(CW\*(C`<jettero@cpan.org>\*(C'\fR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2012 Paul Miller \*(-- Licensed under the \s-1LGPL\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), Statistics::Basic, Statistics::Basic::Vector
