.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Bezier 3"
.TH Bezier 3 "2000-10-19" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::Bezier \- solution of Bezier Curves
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Math::Bezier;
\&
\&    # create curve passing list of (x, y) control points
\&    my $bezier = Math::Bezier\->new($x1, $y1, $x2, $y2, ..., $xn, $yn);
\&
\&    # or pass reference to list of control points
\&    my $bezier = Math::Bezier\->new([ $x1, $y1, $x2, $y2, ..., $xn, $yn]);
\&
\&    # determine (x, y) at point along curve, range 0 \-> 1
\&    my ($x, $y) = $bezier\->point(0.5);
\&
\&    # returns list ref in scalar context
\&    my $xy = $bezier\->point(0.5);
\&
\&    # return list of 20 (x, y) points along curve
\&    my @curve = $bezier\->curve(20);
\&
\&    # returns list ref in scalar context
\&    my $curve = $bezier\->curve(20);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements the algorithm for the solution of Bezier curves
as presented by Robert D. Miller in Graphics Gems V, \*(L"Quick and Simple
Bezier Curve Drawing\*(R".
.PP
A new Bezier curve is created using the \fInew()\fR constructor, passing a list
of (x, y) control points.
.PP
.Vb 1
\&    use Math::Bezier;
\&
\&    my @control = ( 0, 0, 10, 20, 30, \-20, 40, 0 );
\&    my $bezier  = Math::Bezier\->new(@control);
.Ve
.PP
Alternately, a reference to a list of control points may be passed.
.PP
.Vb 1
\&    my $bezier  = Math::Bezier\->new(\e@control);
.Ve
.PP
The point($theta) method can then be called on the object, passing a
value in the range 0 to 1 which represents the distance along the
curve.  When called in list context, the method returns the x and y
coordinates of that point on the Bezier curve.
.PP
.Vb 2
\&    my ($x, $y) = $bezier\->point(0.5);
\&    print "x: $x  y: $y\en
.Ve
.PP
When called in scalar context, it returns a reference to a list containing
the x and y coordinates.
.PP
.Vb 2
\&    my $point = $bezier\->point(0.5);
\&    print "x: $point\->[0]  y: $point\->[1]\en";
.Ve
.PP
The curve($n) method can be used to return a set of points sampled
along the length of the curve (i.e. in the range 0 <= \f(CW$theta\fR <= 1).
The parameter indicates the number of sample points required,
defaulting to 20 if undefined.  The method returns a list of ($x1,
\&\f(CW$y1\fR, \f(CW$x2\fR, \f(CW$y2\fR, ..., \f(CW$xn\fR, \f(CW$yn\fR) points when called in list context, or 
a reference to such an array when called in scalar context.
.PP
.Vb 1
\&    my @points = $bezier\->curve(10);
\&
\&    while (@points) {
\&        my ($x, $y) = splice(@points, 0, 2);
\&        print "x: $x  y: $y\en";
\&    }
\&
\&    my $points = $bezier\->curve(10);
\&
\&    while (@$points) {
\&        my ($x, $y) = splice(@$points, 0, 2);
\&        print "x: $x  y: $y\en";
\&    }
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Andy Wardley <abw@kfs.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Graphics Gems 5, edited by Alan W. Paeth, Academic Press, 1995,
\&\s-1ISBN 0\-12\-543455\-3.\s0  Section \s-1IV.8,\s0 'Quick and Simple Bezier Curve
Drawing' by Robert D. Miller, pages 206\-209.
