#Nanopore data pipeline

#files and directories
configfile: "config.yaml"

rule all:
	input:
		# porechop
		expand("{path}/preprocessing/porechop/15DD0163_porechop.fastq", path = config["path"]),
		# deepbinner
		expand("{path}/preprocessing/deepbinner/classifications", path = config["path"]),
		expand("{path}/preprocessing/deepbinner/barcode10.fastq.gz", path = config["path"]),
		expand("{path}/preprocessing/deepbinner/15DD0163_deepbinner_untrimmed.fastq.gz", path = config["path"]),
		expand("{path}/preprocessing/deepbinner/{strain}_deepbinner.fastq.gz", path = config["path"], strain = config["strains"]),
		expand("{path}/preprocessing/deepbinner/{strain}_deepbinner.fastq", path = config["path"], strain = config["strains"]),
		# NanoPlot
		expand("{path}/quality/nanoplot/{strain}/{strain}_{demultiplex}NanoPlot-report.html", path = config["path"], strain = config["strains"], demultiplex = config["preprocessing"])
		
rule create:
	shell:
		'python create.py'

# classifiy adapter and trim them - porechop
rule porechop:
	input:
		'/mnt/fass2/reads/ont/celia/mycoplasma_doubice_2018/called/2019-06-20/myco_doubice_2019-06-20_2019-06-20_12-29-43_16193.fastq'
	output:
		BC10 = '{path}/preprocessing/porechop/BC10.fastq',
		BC11 = '{path}/preprocessing/porechop/BC11.fastq',
		BC12 = '{path}/preprocessing/porechop/BC12.fastq'
		# ...
	conda:
		'/mnt/prostlocal2/projects/st_mycoplasma_assembly/git/preprocessing.yml'
	params:
		outputdir = '{path}/preprocessing/porechop/'
	threads: 16 #default: 8
	shell:
		'porechop -t {threads} -i {input} -b {params.outputdir}'

rule rename_porechop:
	input:
		BC10 = rules.porechop.output.BC10,
		BC11 = rules.porechop.output.BC11,
		BC12 = rules.porechop.output.BC12
	output:
		strain10 = '{path}/preprocessing/porechop/15DD0163_porechop.fastq',
		strain11 = '{path}/preprocessing/porechop/17DD0007_porechop.fastq',
		strain12 = '{path}/preprocessing/porechop/17DD0020_porechop.fastq'
	shell:
		'mv {input.BC10} {output.strain10} &&'
		'mv {input.BC11} {output.strain11} &&'
		'mv {input.BC12} {output.strain12}'

# classify adapter with Nanopore signals
rule deepbinner_classify:
	input:
		signals = '/mnt/fass2/reads/ont/celia/mycoplasma_doubice_2018/fast5/'
	output:
		classify = '{path}/preprocessing/deepbinner/classifications'
	# conda:
	# 	'/mnt/prostlocal2/projects/st_mycoplasma_assembly/git/preprocessing.yml'
	threads: 24
	shell:
		'deepbinner classify --native {input.signals} > {output.classify}'

rule deepbinner_bin:
	input:
		classify = rules.deepbinner_classify.output.classify,
		reads = '/mnt/fass2/reads/ont/celia/mycoplasma_doubice_2018/called/2019-06-20/myco_doubice_2019-06-20_2019-06-20_12-29-43_16193.fastq'
	output:
		# BC01 = '{path}/preprocessing/deepbinner/barcode01.fastq.gz',
		# BC02 = '{path}/preprocessing/deepbinner/barcode02.fastq.gz',
		# BC03 = '{path}/preprocessing/deepbinner/barcode03.fastq.gz',
		# BC04 = '{path}/preprocessing/deepbinner/barcode04.fastq.gz',
		# BC05 = '{path}/preprocessing/deepbinner/barcode05.fastq.gz',
		# BC06 = '{path}/preprocessing/deepbinner/barcode06.fastq.gz',
		# BC07 = '{path}/preprocessing/deepbinner/barcode07.fastq.gz',
		# BC08 = '{path}/preprocessing/deepbinner/barcode08.fastq.gz',
		# BC09 = '{path}/preprocessing/deepbinner/barcode09.fastq.gz',
		BC10 = '{path}/preprocessing/deepbinner/barcode10.fastq.gz',
		BC11 = '{path}/preprocessing/deepbinner/barcode11.fastq.gz',
		BC12 = '{path}/preprocessing/deepbinner/barcode12.fastq.gz'
	# conda:
	# 	'/mnt/prostlocal2/projects/st_mycoplasma_assembly/git/preprocessing.yml'
	params:
		outputdir = '{path}/preprocessing/deepbinner/'
	threads: 24
	shell:
		'deepbinner bin --classes {input.classify} --reads {input.reads} --out_dir {params.outputdir}'

rule rename_deepbinner:
	input:
		BC10 = rules.deepbinner_bin.output.BC10,
		BC11 = rules.deepbinner_bin.output.BC11,
		BC12 = rules.deepbinner_bin.output.BC12
	output:
		strain10 = '{path}/preprocessing/deepbinner/15DD0163_deepbinner_untrimmed.fastq.gz',
		strain11 = '{path}/preprocessing/deepbinner/17DD0007_deepbinner_untrimmed.fastq.gz',
		strain12 = '{path}/preprocessing/deepbinner/17DD0020_deepbinner_untrimmed.fastq.gz'
	shell:
		'mv {input.BC10} {output.strain10} &&'
		'mv {input.BC11} {output.strain11} &&'
		'mv {input.BC12} {output.strain12}'

# adapter trimming after deepbinner with porechop
rule porechop_after_deepbinner:
	input:
		deepbinner = '{path}/preprocessing/deepbinner/{strain}_deepbinner_untrimmed.fastq.gz'
	output:
		trim = '{path}/preprocessing/deepbinner/{strain}_deepbinner.fastq.gz'
	conda:
		'/mnt/prostlocal2/projects/st_mycoplasma_assembly/git/preprocessing.yml'
	threads: 16
	shell:
		'porechop -t {threads} -i {input.deepbinner} -o {output.trim}'

rule gunzip_deepbinner:
	input:
		zipped = rules.porechop_after_deepbinner.output.trim
	output:
		unzipped = '{path}/preprocessing/deepbinner/{strain}_deepbinner.fastq'
	shell:
		'gunzip {input.zipped}'

rule nanoplot:
	input:
		'{path}/preprocessing/{demultiplex}/{strain}_{demultiplex}.fastq'
	output:
		'{path}/quality/nanoplot/{strain}/{strain}_{demultiplex}NanoPlot-report.html'
	conda:
		'/mnt/prostlocal2/projects/st_mycoplasma_assembly/git/read_quality.yml'
	params:
		outputdir = '{path}/quality/nanoplot/{strain}/',
		prefix = '{strain}_{demultiplex}'
	threads: 8
	shell:
		'NanoPlot -t {threads} --minlength 1000 --fastq {input} -o {params.outputdir} -p {params.prefix} --title {params.prefix}_minlength1000'

# long read assembler
# Canu
rule canu:
	input:
		'{path}/preprocessing/{demultiplex}/{strain}_{demultiplex}.fastq'
	output:
		contigs = '{path}/assembly/{strain}_{demultiplex}_canu/{strain}_{demultiplex}_canu.contigs.fasta'
	conda:
		'/mnt/prostlocal2/projects/st_mycoplasma_assembly/git/assembly.yml'
	params:
		outputdir = '{path}/assembly/{strain}_{demultiplex}_canu/',
		prefix = '{strain}_{demultiplex}_canu'
	threads: 24
	shell:
		'canu -p {params.prefix} -d {params.outputdir} genomeSize=1000000 minThreads=4 maxThreads={threads} maxMemory=31 -nanopore-raw {input}' # useGrid=false

# Flye
rule flye:
	input:
		'{path}/preprocessing/{demultiplex}/{strain}_{demultiplex}.fastq'
	output:
		contigs = '{path}/assembly/{strain}_{demultiplex}_flye/assembly.fasta'
	conda:
		'/mnt/prostlocal2/projects/st_mycoplasma_assembly/git/flye.yml'
	params:
		outputdir = '{path}/assembly/{strain}_{demultiplex}_flye/',
	threads: 24
	shell:
		'flye --nano-raw {input} -o {params.outputdir} -t {threads} -g 1000000'

# rename flye output
rule rename_flye:
	input:
		contigs = rules.flye.output.contigs
	output:
		flye = '{path}/assembly/{strain}_{demultiplex}_flye/{strain}_{demultiplex}_flye.contigs.fasta'
	shell:
		'mv {input.contigs} {output.flye}'

# wtdbg2
rule wtdbg2:
	input:
		'{path}/preprocessing/{demultiplex}/{strain}_{demultiplex}.fastq'
	output:
		ctg = '{path}/assembly/{strain}_{demultiplex}_wtdbg2/{strain}_{demultiplex}_wtdbg2.ctg.lay.gz'
	conda:
		'/mnt/prostlocal2/projects/st_mycoplasma_assembly/git/assembly.yml'
	params:
		ctg = '{path}/assembly/{strain}_{demultiplex}_wtdbg2/{strain}_{demultiplex}_wtdbg2'
	threads: 16
	shell:
		'wtdbg2 -x nanopore -g 1000000 -i {input} -t {threads} -o {params.ctg}'

# convert wtdbg2 ouput to fasta
rule convert_wtdbg2:
	input:
		ctg = rules.wtdbg2.output.ctg
	output:
		contigs = '{path}/assembly/{strain}_{demultiplex}_wtdbg2/{strain}_{demultiplex}_wtdbg2.contigs.fasta'
	conda:
		'/mnt/prostlocal2/projects/st_mycoplasma_assembly/git/assembly.yml'
	threads: 16
	shell:
		'wtdbg-cns -t {threads} -i {input.ctg} -o {output.contigs}'


# polishing with racon four times		use minimap2 for the mapping inbetween the polishing
rule minimap2_racon:
	input:
		assembly = '{path}/assembly/{strain}_{demultiplex}_{assembler}/{strain}_{demultiplex}_{assembler}.contigs.fasta',
		reads = '{path}/preprocessing/{demultiplex}/{strain}_{demultiplex}.fastq'
	output:
		out = '/mnt/prostlocal2/projects/st_mycoplasma_assembly_docker/racon/nanopore/{strain}_{demultiplex}_{assembler}/{strain}_{demultiplex}_{assembler}4.contigs.fasta'
	params:
		strain = '{strain}',
		demultiplex = '{demultiplex}',
		assembler = '{assembler}',
		path = '{path}'
	threads: 32
	run:
		import os
		import time
		reads_path = str(params.path) + '/preprocessing/' + str(params.demultiplex) + '/'
		only_reads = str(params.strain) + '_' + str(params.demultiplex) + '.fastq'
		racon_path = '/mnt/prostlocal2/projects/st_mycoplasma_assembly_docker/racon/nanopore' + str(params.strain) + '_' + str(params.demultiplex) + '_' + str(params.assembler) + '/'
		assembly_path = str(params.path) + '/assembly/' + str(params.strain) + '_' + str(params.demultiplex) + '_' + str(params.assembler) + '/'
		paf_path = str(params.path) + '/postprocessing/' + str(params.strain) + '_' + str(params.demultiplex) + '_' + str(params.assembler) + '/'
		assembly_file = str(params.strain) + '_' + str(params.demultiplex) + '_' + str(params.assembler) + '.contigs.fasta'
		for i in range(4):
			if i == 0:
				minimap2_input_assembly = assembly_path + assembly_file
				racon_in_assembly = assembly_file
			else:
				minimap2_input_assembly = racon_path + out_assembly
				racon_in_assembly = out_assembly
			out_assembly = str(params.strain) + '_' + str(params.demultiplex) + '_' + str(params.assembler) + str(i + 1) + '.contigs.fasta'
			paf = str(params.strain) + '_' + str(params.demultiplex) + '_' + str(params.assembler)+ str(i + 1) + '.paf'
			minimap2 = 'minimap2 -x map-ont -t 16 ' + minimap2_input_assembly + ' ' + reads_path + only_reads + ' > ' + paf_path + paf
			print(minimap2 + '\n')
			os.system(minimap2)
			while os.path.isfile(paf_path + paf) == False:
				time.sleep(5)
			if i == 0:
				racon = 'docker run --rm --user $(id -u):$(id -g) -it -v ' + reads_path + ':/input1 -v ' + paf_path + ':/input2 -v ' + assembly_path + ':/input3 -v ' + racon_path + ':/output quay.io/biocontainers/racon:1.3.2--he941832_0 sh -c "racon -t 32 /input1/' + only_reads + ' /input2/' + paf + ' /input3/' + racon_in_assembly + ' > /output/' + out_assembly + '"'
			else:
				racon = 'docker run --rm --user $(id -u):$(id -g) -it -v ' + reads_path + ':/input1 -v ' + paf_path + ':/input2 -v ' + racon_path + ':/input3 -v ' + racon_path + ':/output quay.io/biocontainers/racon:1.3.2--he941832_0 sh -c "racon -t 32 /input1/' + only_reads + ' /input2/' + paf + ' /input3/' + racon_in_assembly + ' > /output/' + out_assembly + '"'
			print(racon + '\n')			
			os.system(racon)
		
rule move_racon_output:
	input:
		racon_out = rules.minimap2_racon.output.out
	output:
		move = '{path}/postprocessing/{strain}_{demultiplex}_{assembler}/{strain}_{demultiplex}_{assembler}4.contigs.fasta'
	shell:
		'mv {input.racon_out} {output.move}'

# polishing with medaka
rule medaka:
	input:
		reads = '{path}/preprocessing/{demultiplex}/{strain}_{demultiplex}.fastq',
		racon_out = rules.move_racon_output.output.move
	output:
		medaka = '{path}/postprocessing/{strain}_{assembler}_{demultiplex}/consensus.fasta'
	conda:
		'/mnt/prostlocal2/projects/st_mycoplasma_assembly/git/postprocessing.yml'
	params:
		outputdir = '{path}/postprocessing/{strain}_{assembler}_{demultiplex}/'
	threads: 16
	shell:
		'medaka_consensus -i {input.reads} -d {input.racon_out} -o {params.outputdir} -t {threads} -m r941_min_high'

# quality check with quast
rule quast_strain:
	input:
		in1 = '{path}/postprocessing/{strain}_canu_porechop/consensus.fasta',
		in2 = '{path}/postprocessing/{strain}_flye_porechop/consensus.fasta',
		in3 = '{path}/postprocessing/{strain}_wtdbg2_porechop/consensus.fasta',
		in4 = '{path}/postprocessing/{strain}_canu_deepbinner/consensus.fasta',
		in5 = '{path}/postprocessing/{strain}_flye_deepbinner/consensus.fasta',
		in6 = '{path}/postprocessing/{strain}_wtdbg2_deepbinner/consensus.fasta'
	output:
		report = '{path}/quality/quast/{strain}/report.html'
		#...
	conda:
		'/mnt/prostlocal2/projects/st_mycoplasma_assembly/git/assembly_quality.yml'
	params:
		outputdir = '{path}/quality/quast/{strain}/'
	threads: 16
	shell:
		'quast {input.in1} {input.in2} {input.in3} {input.in4} {input.in5} {input.in6} -r /mnt/prostlocal2/projects/st_mycoplasma_assembly/mycoplasma_bovis_genomes/mycoplasma_bovis_referenceGenome.fasta -g /mnt/prostlocal2/projects/st_mycoplasma_assembly/mycoplasma_bovis_genomes/GCF_000183385.1_ASM18338v1_genomic.gff -o {params.outputdir}'

# quality check with quast
rule quast_all:
	input:
		in1 = '{path}/postprocessing/15DD0163_canu_porechop/consensus.fasta',
		in2 = '{path}/postprocessing/15DD0163_flye_porechop/consensus.fasta',
		in3 = '{path}/postprocessing/15DD0163_wtdbg2_porechop/consensus.fasta',
		in4 = '{path}/postprocessing/15DD0163_canu_deepbinner/consensus.fasta',
		in5 = '{path}/postprocessing/15DD0163_flye_deepbinner/consensus.fasta',
		in6 = '{path}/postprocessing/15DD0163_wtdbg2_deepbinner/consensus.fasta',
		in7 = '{path}/postprocessing/17DD0007_canu_porechop/consensus.fasta',
		in8 = '{path}/postprocessing/17DD0007_flye_porechop/consensus.fasta',
		in9 = '{path}/postprocessing/17DD0007_wtdbg2_porechop/consensus.fasta',
		in10 = '{path}/postprocessing/17DD0007_canu_deepbinner/consensus.fasta',
		in11 = '{path}/postprocessing/17DD0007_flye_deepbinner/consensus.fasta',
		in12 = '{path}/postprocessing/17DD0007_wtdbg2_deepbinner/consensus.fasta',
		in13 = '{path}/postprocessing/17DD0020_canu_porechop/consensus.fasta',
		in14 = '{path}/postprocessing/17DD0020_flye_porechop/consensus.fasta',
		in15 = '{path}/postprocessing/17DD0020_wtdbg2_porechop/consensus.fasta',
		in16 = '{path}/postprocessing/17DD0020_canu_deepbinner/consensus.fasta',
		in17 = '{path}/postprocessing/17DD0020_flye_deepbinner/consensus.fasta',
		in18 = '{path}/postprocessing/17DD0020_wtdbg2_deepbinner/consensus.fasta'
	output:
		report = '{path}/quality/quast/report.html'
		#...
	conda:
		'/mnt/prostlocal2/projects/st_mycoplasma_assembly/git/assembly_quality.yml'
	params:
		outputdir = '{path}/quality/quast/'
	threads: 16
	shell:
		'quast {input.in1} {input.in2} {input.in3} {input.in4} {input.in5} {input.in6} {input.in7} {input.in8} {input.in9} {input.in10} {input.in11} {input.in12} {input.in13} {input.in14} {input.in15} {input.in16} {input.in17} {input.in18} -r /mnt/prostlocal2/projects/st_mycoplasma_assembly/mycoplasma_bovis_genomes/mycoplasma_bovis_referenceGenome.fasta -g /mnt/prostlocal2/projects/st_mycoplasma_assembly/mycoplasma_bovis_genomes/GCF_000183385.1_ASM18338v1_genomic.gff -o {params.outputdir}'