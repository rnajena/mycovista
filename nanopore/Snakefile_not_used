# classify adapter with Nanopore signals
rule deepbinner:
	input:
		signals = '/data/fass2/nanopore_workshop/basecalling_mycoplasma/fast5/',
		reads = '{path}nanopore/raw_data/myco_doubice_2018.fastq'
	output:
		classify = '{path}nanopore/demultiplexing/deepbinner/classifications'
	conda:
		'/home/nu76fet/miniconda3/envs/mycoplasma/mycoplasma.yaml'
	threads: 32
	run:
		string = output.classify.split("/")
		outputdir = outputdir = string[0] + '/' + string[1] + '/' +  string[2] + '/' + string[3] + '/'
		shell('deepbinner classify --native {input.signals} > {output.classify}')
		shell('deepbinner bin --classes {output.classify} --reads {input.reads} --out_dir {outputdir}')

# adapter trimming after deepbinner with porechop
rule porechop_after_deepbinner:
	input:
		deepbinner = '{path}Nanopore/demultiplexing/deepbinner/bin/17DD0007_deepbinner.fastq.gz'
	output:
		trim = '{path}Nanopore/demultiplexing/deepbinner/trim/17DD0007_deepbinner_trimmed.fastq.gz'
	conda:
		'/home/nu76fet/miniconda3/envs/mycoplasma/mycoplasma.yaml'
	threads: 16
	shell:
		'porechop -t {threads} -i {input.deepbinner} -o {output.trim}'

# wtdbg2
rule wtdbg2_porechop:
	input:
		'{path}nanopore/demultiplexing/porechop/{strain}_porechop.fastq'
	output:
		ctg = '{path}nanopore/assembly/{strain}_wtdbg2_porechop/{strain}_wtdbg2_porechop.ctg.lay.gz',
		contigs = '{path}nanopore/assembly/{strain}_wtdbg2_porechop/{strain}_wtdbg2_porechop.contigs.fasta'
	conda:
		'/home/nu76fet/miniconda3/envs/mycoplasma/mycoplasma.yaml'
	threads: 16
	run:
		string = output.contigs.split(".")
		output = string[0]
		shell('wtdbg2 -x nanopore -g 1000000 -i {input} -t {threads} -o {output.ctg}')
		shell('wtpoa-cns -t {threads} -i {output.ctg} -o {output.contigs}')

# Canu
rule canu_deepbinner:
	input:
		'{path}Nanopore/demultiplexing/deepbinner/trim/{strain}_deepbinner_trimmed.fastq.gz'
	output:
		contigs = '{path}Nanopore/assembly/{strain}_canu_deepbinner2/{strain}_canu_deepbinner2.contigs.fasta'
	conda:
		"/home/nu76fet/miniconda3/envs/mycoplasma/mycoplasma.yaml"
	threads: 32
	run:
		string = output.contigs.split("/")
		outputdir = string[0] + '/' + string[1] + '/' + string[2] + '/' + string[3] + '/' + string[4] + '/' + string[5] + '/' + string[6] + '/' + string[7] + '/'
		prefix = string[len(string) - 1].split(".")
		prefix = prefix[0]
		shell('canu -p {prefix} -d {outputdir} genomeSize=1000000 useGrid=false minThreads=4 maxThreads={threads} maxMemory=31 -nanopore-raw {input}')

# Flye
rule flye_deepbinner:
	input:
		'{path}Nanopore/demultiplexing/deepbinner/trim/{strain}_deepbinner_trimmed.fastq.gz'
	output:
		contigs = '{path}Nanopore/assembly/{strain}_flye_deepbinner/{strain}_flye_deepbinner.contigs.fasta'
	conda:
		'/home/nu76fet/miniconda3/envs/flye/flye.yaml'
	threads: 16
	run:
		string = output.contigs.split("/")
		outputdir = string[0] + '/' + string[1] + '/' + string[2] + '/' + string[3] + '/' + string[4] + '/' + string[5] + '/' + string[6] + '/' + string[7] + '/'
		shell("flye --nano-raw {input} -o {outputdir} -t {threads} -g 1000000")

# wtdbg2
rule wtdbg2_deepbinner:
	input:
		'{path}Nanopore/demultiplexing/deepbinner/trim/{strain}_deepbinner_trimmed.fastq.gz'
	output:
		ctg = '{path}Nanopore/assembly/{strain}_wtdbg2_deepbinner/{strain}_wtdbg2_deepbinner.ctg.lay.gz'
		#contigs = '{path}Nanopore/assembly/{strain}_wtdbg2_porechop/{strain}_wtdbg2_deepbinner.contigs.fasta'
	conda:
		'/home/nu76fet/miniconda3/envs/mycoplasma/mycoplasma.yaml'
	threads: 16
	run:
		string = output.ctg.split(".")
		out = string[0]
		shell('wtdbg2 -x nanopore -g 1000000 -i {input} -t {threads} -o {out}')
		shell('wtpoa-cns -t {threads} -i {output.ctg} -o {output.contigs}')